http://hanpama.appspot.com/REQUIREJS_API                    zzzzzzzzzzzzzzzzzzzz
http://blog.javarouka.me/
무언가를 포함시키고 싶다면, 그때마다 require 함수를 사용해서 가져온다는 지극히 단순한 구조
require 함수로 무언가를 로드하면, 로드하기전에 거기에 종속성이 있는지 판별한뒤에 종속성이 있는 것들을 먼저 가져온 후
require로 로드하렬는 것을 불러온다. 그 후에 콜백함수가 실행되는 것
의존성
모듈화
<script data-main="js/app" src="js/require.js"></script>
requirejs.config({
	baseUrl:,
	paths:,
	shim:,
});

define(function(require){
	var alerter = require("alerter");
	alerter("1");
});
require();

alerter.js
define(function(){
	return function(message){
		alert(message);
	}
});
1. var alerter = require("alerter");  // define 모듈 사용하기
2. require(['alerter'], function(){   // define 모듈 사용하기
   });
   
   
왜 모듈화일까
website 는 web application 으로 변화 중
전역 공간 오염 위험도가 증가했다
스크립트 코드 복잡도가 상승했다
스크립트간 의존성을 정의하는 방법이 없다
스크립트의 공통적인 배포 방법이 없다

RequireJS
AMD 표준에 CommonJS와 호환
모던 브라우저에서 바로 사용가능
모듈 비동기 로딩
두 전역함수를 통하여 모듈 및 의존성 정의
define
require(js)
설치는 그냥 include.
data-main 속성으로 엔트리 지정가능
<script data-main="main" src="lib/require.js"></script>

define 모듈 정의
모듈이름(옵션), 의존성(옵션), 모듈 생성 함수|객체(필수)
의존성 모듈이 전부 로드가 완료되어야 팩토리 함수가 콜백됨.
의존성 문자열이 모듈의 PATH. '.js' 는 생략
팩토리 함수의 생성값은 함수가 허용하는 반환값이면 뭐든지 가능
아이디는 생략 가능하고 의존성을 생략하면 의존성 없는 모듈이 된다.

require 의존성 정의
define과는 다르게 실행 코드의 모듈 의존성만 정의함
의존성 배열이 필수
뒤의 함수는 팩토리가 아닌 실행 코드
이 외의 부분은 define과 동일

RequireJS의 적용
AMD 규격에 맞는 코드로 모듈 작성
클로저에 익숙할 수록 모듈 코드 작성이 수월
shim 옵션 등을 통해 기존 스크립트 코드 재활용


   
