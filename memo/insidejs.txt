데이터타입
기본타입
- 문자열(string), 숫자(number), 블린(boolean), undefined, null

참조타입
- 객체 ( 배열, 함수, 정규표현식 ) 


객체 - 키와 값을 가지고 있는 프로퍼티 영역(컨테이너 container)
hash - 하나의 키와 값을 가지고 있는것
hashmap - hash 모음격

객체 사용방법
1. 내장 생성방법 Object()
var foo = new Object();
foo.age = "35";
2. 리터럴 방식(표현방식)
var foo = {
	age = "35";
}
3. 생성자 함수 사용
function Foo(age){
	this.age = "35";
}

for in문
delete 연산자  - 객체 프로퍼티 삭제 ex)delete foo.age;
속성만 삭제 가능

리터럴 - 공간에 저장되는 값
부모객체(프로토타입 prototype) - 상속 개념과 같이 부모 객체의 프로퍼티를 마치 자신의 것처럼 쓸수있는것
객체리터럴 - 중괄호{} 표기법
배열리터럴 - 대괄호[] 사용

함수 호이스팅
보통 순차적으로 읽기 때문에 변수같은경우도 선언후 호출해야 호출되는데 함수 선언문 같은경우는
제일 먼저 읽어 주기 때문에 작성 순서와 상관없이 호출이 가능

생성자함수 Person()
객체 var foo = new Person();
foo 한테 부모객체(Person.prototype) 이다.

객체에서 프로퍼티나 메소드가 없을경우 부모객체(prototype) 차례대로 검색해서 찾는걸 프로토타입 체이닝이라한다.

실행컨테스트
- 실행가능함 코드(함수) 블럭처러 차례대로 실행하는것

스코프체인
- 현재 실행 컨테스트의 변수객체+상위컨테스트의 스코프체인
- var1는 func 변수 객체를 먼저 탐색하고, 없으면 전역객체를 탐색한다

1.전역변수에 var1이 선언되어잇음
2.함수안에 var1이 또 선언
3.함수가 실행되면 실행 컨테스트가 생성, 이 새로운 실행 컨테스트는 자신이 사용할 스코프체인을 만든다.
4.현재 실행된는 함수 객체의 var1[scope] 프로퍼티를 복사하고, 새롭게 생성된 변수객체를 해당 체인의 제일 앞에 추가한다.
5.스코프체인 = 현재 실행컨텍스트의 변수객체 + 상위 컨텍스트의 스코프체인 


